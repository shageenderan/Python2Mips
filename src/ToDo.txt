To Do
 [DONE] Print: add support to accept multiple arguments: print("testVal", val)
 [DONE] Input: add support for int(input())
 [DONE] Add suport for string concatenation, i.e. print("hello " + " world")
 [DONE] Add variable assignment support, i.e. x = 10
 [DONE] Add support for arithmetic operations
 [DONE] Fix parser to only add a string to dataStack if its not already in dataStack
 [DONE] Update parser to switch between storing string or .space

 [DONE] Convert Arthimetic print tokens
    -[FIXED] Fix translate not handling {left: previous, right: next} properly. Some test cases to reproduce error:
        print((2*2 + 3*4) * 45/50)
        print(45/50 * (2*2 + 3*4)) - results in infinite loop
        Has to do with how {right: next} is handled.
 [DONE] Add support for casting values i.e. x = 10; str(x)
 [DONE] Translate input statements
 [DONE] Differentiate between integer and string variables. 
 [DONE] Translate variable assignment statements
 [DONE] Unit tests for input translations
 [DONE] Unit tests for variable assignment translations
 [DONE] Refactor storing string variables from .asciiz to .space
 [DONE] Add support for string concatenation. i.e. str = "hello", str = str + "world". as well as handle multiple concats. i.e. str = "he" + "llo " + "world"
 [DONE] Move function calls to after sys exit
    -[RESTRICTING] Fix string concatenation translation going into an infinite loop when variable is set on the right. i.e. x = "world" + x. (might end up restricting this)
 [DONE] Add support for dynamic variable types
 [DONE] Add support to dynamically allocate space for strings of known length/Integers/ArtihmeticExpressions. 
 [DONE] Differentiate between assigning string variables and int variables during variable assignment. i.e. z = x + y, should return 
    -[FIXED] As handling is done in string concat token, string concat will only look at  the '+' operator, resulting in every other operator being ignored
     possible fix: see if swapping positions of arithmetic will match(but this might remove previous functionality)
 [DONE] Add support for returning ArtihmeticExpression if x and y are int variables but return StringConcatenation if x and y are string variables. This will also
 [DONE] fix not being able to mix multiple variables consecutively during string concatenation.
 [DONE] fix how variable assignment for strings is being handled; a string should only be read in char-by-char if it is reassigned later on, i.e.: x = "hello"; y="am i doing something wrong?"; print(x); x = "hello young luke skywalker" + " " + y; print(x); print(y); x = "reset"; print(x)
 [DONE] Add support for adding self into an ArtihmeticExpression, i.e. x = 10; x += 1;
 [DONE] parse if/else
 [DONE] write tokens for if/else
 [DONE] Add support for unaryBooleanExpressions, i.e. "if x" as well as things like "if x (is or ==) True"
 [DONE] Add a 'type' to if conditions to help distinguish between binary, unaryBooleanExpression and Chained boolean expressiosn
 [DONE] Translate unaryBooleanExpression 
 [DONE] Refactor Chained Boolean parsing to take into account rount brackets. Follow Arithmetic expressions parsing 
 [DONE] Translate Chained boolean expressions 
 [NO NEED] Add translations for string concatenatrion in if conditions. Do this by checking each elem in addedString and ensure AT LEAST ONE is non empty
 [DONE] Add boolean data type 
 [DONE] Update parser to automatically negate parsed expressions. i.e. 
    if !True should parse: if False 
    if !(x > 3) should parse: if x <= 3
 [FIXED] [BUG] Fix parse being unable to parse empty strings. i.e. x = "" / if "" == "p": \tprint("ok")
 [FIXED] [BUG] Self concatenation, previous space values not being properly added
 [DONE] write string comparision
 [DONE] update strCmp function to ignore trailing newlines
 [DONE] while loops
 [DONE] for loops
  [FIXED] continue statement bug, supposed to jump to most outer while loop 
 
Important 
 - Change allocating memory for ints only if the value is updated to a different Type. i.e., x=10; x=2+x; should initialize x to x: .word 10. 
  in memory not x: .space 4.
 - fix parsing indentations. i.e. 
   while x > 3:
      while y < 2:
          print(y)
          y += 2
      x -= 1
   the x above is parsed under the body of the second while instead of the first.
   2 fixes
   1) look into indent, dedent, samedent [better bRut much harder]
   2) write code to translate input file of valid python where indents are replaced to something easier to parse, such as '{' [easier but try to avoid at all cost]
 - arrays
    [FIXED] Need to differentiate between static lists(i.e. those declared at compile time) vs dynamic lists(i.e. those declared at run time)
                static  lists loaded by: la $t0, staticList 
                dynamic lists loaded by: lw $t0, dynamicList
    [DONE] Array declarations
    [DONE FOR NOW] Array operations
      -[DONE] element assignment
      - [DONE] print(array)
        - [DONE]print(elem)
      - [DONE] input(array)
        - [DONE] input(elem)
      - [DONE] len(array); Do this by adding len as par of Functions in the parser.
      - [DONE] translate loops in range(len(array))
  -translate functions
    -translate function declarations
      [IN PROGRESS] add a flag while parsing to indicate if variables are to be added to the data stack. Set this variable to false when parsing for functions to
      avoid adding local variables and parameters to the data stack.
    -translate function calling
  -dynamic allocation for arrays(?)
  -fix data translation for string arrays
 - functions
 - translation for comments
 - parse prompts for numbers to get insight on how much space to allocate to a input variable. i.e. x = input("Enter name(max 60 chars)")
  will return 60 as space for x
 

Small/Optional 
 - if/else conditions
    -Add support for elif conditions [high priority]
    -Add support for switch statements [low priority]
 - Change whitespace being added to data section [optional, might want to keep it that way?]
 - Unit tests for string concatenations 
 - update parser to only add string if string.length > 1. For strings length < 1, return type "characters" instead
 - Refactor translating arithmetics to take in an optional variable "register" which will dictate the final register to place the
   value instead of the default $t0.

Not Supporting:
1) concatentaing a string with itself at a position that is not 0 i.e.:
      x = "hello"
      print(x)
      x = x + " world"
      print(x)
      [VALID]

      x = "world"
      print(x)
      x = "hello " + x
      print(x)
      [NOT-VALID]
  reason: without declaring a temporary lable of a large arbritary size, it would be very hard to find the correct offset to 
    store the variable value in its memory location in all cases(think something like x = "hello" + y + x, where y is some user 
    inputted string; it would be hard to know exactly the right offset to store x initially without overwritting the current 
    contents of x)
  workaround: don't be stingy with variable declarations :)
  possible fix: declaring a temp label in .data of a large size to store this variable in before concatenating everything. 
    pros: easy to implement
    cons: possible huge waste of memory
2) brackets in string concatenation. i.e.:
    x = "hello"*2 + "world"*2
    [VALID]
    c = ("hello" + "world")*2
    [NOT VALID]
    reason: similar to above, need to store bracket expressions somewhere before continuing
3) String concatenation with user input.
i.e. x = input()
     x = x + "world"
     [NOT VALID]
3) floating point numbers
  reason: out of scope
4) classes
  reason: out of scope
5) file manipulation(for now, might change)
  reason: out of scope